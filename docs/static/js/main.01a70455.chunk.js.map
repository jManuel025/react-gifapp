{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.jsx","components/GifGrid.jsx","containers/GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","useFetchGifs","loading","state","setstate","useEffect","then","imgs","GifGridItem","className","src","alt","GifGrid","key","GifExpertApp","app","document","querySelector","ReactDOM","render"],"mappings":"mNAkCeA,EA/BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAELC,mBAAS,IAFJ,mBAElCC,EAFkC,KAEtBC,EAFsB,KAezC,OACE,0BAAMC,SARa,SAACC,GACpBA,EAAEC,iBACFJ,EAAWK,OAAOC,OAAS,GACtBR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OACjDN,EAAc,MAKZ,2BACEO,KAAK,OACLC,MAAQT,EACRU,SAhBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,QAgBnBG,YAAY,a,uBCVLC,EAdF,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACNC,EADM,iDAC0CC,UAAUH,GADpD,+DAEOI,MAAMF,GAFb,cAENG,EAFM,gBAGWA,EAAKC,OAHhB,uBAGJC,EAHI,EAGJA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAR9B,kBAWLM,GAXK,4CAAH,sDCsBEO,EAnBM,SAACf,GAAc,IAAD,EACLf,mBAAS,CAC/BsB,KAAM,GACNS,SAAS,IAHkB,mBACxBC,EADwB,KACjBC,EADiB,KAgB/B,OAVAC,qBAAU,WACNpB,EAAQC,GACHoB,MAAK,SAAAC,GACFH,EAAS,CACLX,KAAMc,EACPL,SAAS,SAGrB,CAAChB,IAEGiB,GCTIK,EARK,SAAC,GAAuB,EAArBX,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAC9B,OACI,yBAAKqB,UAAU,4DACX,yBAAKC,IAAMtB,EAAMuB,IAAMb,MCmBpBc,EAnBC,SAAC,GAAkB,IAAhB1B,EAAe,EAAfA,SAAe,EAEGe,EAAaf,GAAjCa,EAFiB,EAEtBN,KAAaS,EAFS,EAETA,QAErB,OACI,oCACI,4BAAMhB,GACJgB,GAAW,yCACb,yBAAKO,UAAU,aAEPV,EAAOJ,KAAI,SAACC,GAAD,OACP,kBAAC,EAAD,eAAaiB,IAAKjB,EAAIC,IAASD,UCYxCkB,EAxBM,WAAO,IAAD,EAEW3C,mBAAS,CAAC,QAFrB,mBAElBQ,EAFkB,KAENT,EAFM,KAIzB,OACE,oCACE,0CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BACA,4BAEIS,EAAWgB,KAAI,SAACT,GAAD,OACb,kBAAC,EAAD,CACE2B,IAAM3B,EACNA,SAAWA,UCbnB6B,EAAMC,SAASC,cAAc,QAEnCC,IAASC,OAAO,kBAAC,EAAD,MAAkBJ,I","file":"static/js/main.01a70455.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n\r\n  const [inputValue, setInputValue] = useState('')\r\n  \r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value)\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    inputValue.trim().length > 2 \r\n      && setCategories(categories => [inputValue, ...categories ])\r\n    setInputValue('')\r\n  }\r\n  \r\n  return (\r\n    <form onSubmit={ handleSubmit }>\r\n      <input \r\n        type=\"text\" \r\n        value={ inputValue }\r\n        onChange={ handleInputChange }\r\n        placeholder='Search'\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired \r\n}\r\n\r\nexport default AddCategory;\r\n","const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&api_key=4CVUyNLEZlrhbrDGN3QKCqQsiPxJpjj2&limit=10`\r\n    const resp = await fetch(url)\r\n    const { data } = await resp.json()\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs //regresa promesa\r\n}\r\n\r\nexport default getGifs","import { useState, useEffect } from 'react'\r\nimport getGifs from '../helpers/getGifs'\r\n\r\nconst useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => { // para que no haga la peticion cada vez que se renderice otro comp\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setstate({\r\n                    data: imgs,\r\n                   loading: false\r\n                })\r\n            })\r\n    }, [category])\r\n\r\n    return state\r\n}\r\n\r\nexport default useFetchGifs\r\n","import React from 'react'\r\n\r\nconst GifGridItem = ({ id, title, url }) => {\r\n    return (\r\n        <div className='card animate__animated animate__bounce animate__delay-2s'>\r\n            <img src={ url } alt={ title }/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","// import React, { useState, useEffect } from 'react'\r\nimport React from 'react'\r\nimport useFetchGifs from '../hooks/useFetchGifs'\r\nimport GifGridItem from './GifGridItem'\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n    const { data:images, loading } = useFetchGifs(category)\r\n    \r\n    return (\r\n        <>\r\n            <h3>{ category }</h3>\r\n            { loading && <p>loading...</p>}\r\n            <div className='card-grid'>\r\n                {\r\n                    images.map((img) => (\r\n                        <GifGridItem key={img.id} { ...img }/>\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","import React, { useState } from \"react\";\r\nimport AddCategory from \"../components/AddCategory\";\r\nimport GifGrid from \"../components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n\r\n  const [categories, setCategories] = useState(['One'])\r\n\r\n  return (\r\n    <>\r\n      <h1>Gif Expert</h1>\r\n      <AddCategory setCategories={ setCategories }/>\r\n      <hr />\r\n      <ol>\r\n        {\r\n          categories.map((category) => (\r\n            <GifGrid \r\n              key={ category }\r\n              category={ category }\r\n            />\r\n          ))\r\n        }\r\n      </ol>\r\n      {/* <button onClick={handleAdd}>Add</button> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport GifExpertApp from './containers/GifExpertApp'\r\n\r\nconst app = document.querySelector('#app')\r\n\r\nReactDOM.render(<GifExpertApp />, app)"],"sourceRoot":""}